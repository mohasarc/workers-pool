"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskWorker = void 0;
const worker_threads_1 = require("worker_threads");
class TaskWorker extends worker_threads_1.Worker {
    constructor(fileName, options) {
        super(fileName, options);
        this.busy = false;
        this.task;
        this.rejectCallback;
        this.resolveCallback;
        this.initListeners();
    }
    isBusy() {
        return this.busy;
    }
    initListeners() {
        super.on("error", (error) => {
            this.rejectCallback({ task: this.task, worker: this, error });
            this.clenUp();
        });
        super.on("messageerror", (error) => {
            this.rejectCallback({ task: this.task, worker: this, error });
            this.clenUp();
        });
        super.on("online", () => {
            // console.log("TaskWorker is online");
        });
        super.on("message", (response) => {
            if (response.type == 'success')
                this.resolveCallback({ task: this.task, worker: this, result: response.value });
            else if (response.type == 'error')
                this.rejectCallback({ task: this.task, worker: this, result: response.value });
            this.clenUp();
        });
    }
    async processTask(task) {
        // Build the message object
        this.busy = true;
        this.task = task;
        var message = {
            filePath: task.filePath,
            functionName: task.functionName,
            params: task.params,
        };
        let promise = new Promise((resolve, reject) => {
            this.resolveCallback = resolve;
            this.rejectCallback = reject;
            super.postMessage(message);
        });
        return promise;
    }
    clenUp() {
        this.task = null;
        this.rejectCallback = null;
        this.resolveCallback = null;
        this.busy = false;
    }
}
exports.TaskWorker = TaskWorker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza1dvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9UYXNrV29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUF1RDtBQUd2RCxNQUFhLFVBQVcsU0FBUSx1QkFBTTtJQU9sQyxZQUFZLFFBQWdCLEVBQUUsT0FBc0I7UUFDaEQsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUNwQixJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYTtRQUNULEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7WUFDNUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ3BCLHVDQUF1QztRQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDN0IsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLFNBQVM7Z0JBQzFCLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztpQkFDN0UsSUFBSSxRQUFRLENBQUMsSUFBSSxJQUFJLE9BQU87Z0JBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztZQUVqRixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFVO1FBQ3hCLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLE9BQU8sR0FBRztZQUNWLFFBQVEsRUFBRyxJQUFJLENBQUMsUUFBUTtZQUN4QixZQUFZLEVBQUcsSUFBSSxDQUFDLFlBQVk7WUFDaEMsTUFBTSxFQUFHLElBQUksQ0FBQyxNQUFNO1NBQ3ZCLENBQUE7UUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMxQyxJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQztZQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztZQUM3QixLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0NBQ0o7QUF0RUQsZ0NBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV29ya2VyLCBXb3JrZXJPcHRpb25zIH0gZnJvbSAnd29ya2VyX3RocmVhZHMnO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gJy4vVGFzayc7XG5cbmV4cG9ydCBjbGFzcyBUYXNrV29ya2VyIGV4dGVuZHMgV29ya2VyIHtcbiAgICBidXN5OiBib29sZWFuO1xuICAgIHRhc2s6IFRhc2s7XG4gICAgcmVqZWN0Q2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHJlc29sdmVDYWxsYmFjazogRnVuY3Rpb247XG4gICAgaWQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGZpbGVOYW1lOiBzdHJpbmcsIG9wdGlvbnM6IFdvcmtlck9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZmlsZU5hbWUsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YXNrO1xuICAgICAgICB0aGlzLnJlamVjdENhbGxiYWNrO1xuICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjaztcbiAgICAgICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgaXNCdXN5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5idXN5O1xuICAgIH1cblxuICAgIGluaXRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLm9uKFwiZXJyb3JcIiwgKGVycm9yKSA9PiB7IC8vIFRPRE8gcmVqZWN0Q2FsbGJhY2sgY2FuIGJlIHVuZGVmaW5lZFxuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayh7dGFzazogdGhpcy50YXNrLCB3b3JrZXI6IHRoaXMsIGVycm9yfSk7XG4gICAgICAgICAgICB0aGlzLmNsZW5VcCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlci5vbihcIm1lc3NhZ2VlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0Q2FsbGJhY2soe3Rhc2s6IHRoaXMudGFzaywgd29ya2VyOiB0aGlzLCBlcnJvcn0pO1xuICAgICAgICAgICAgdGhpcy5jbGVuVXAoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIub24oXCJvbmxpbmVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJUYXNrV29ya2VyIGlzIG9ubGluZVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3VwZXIub24oXCJtZXNzYWdlXCIsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT0gJ3N1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZUNhbGxiYWNrKHt0YXNrOiB0aGlzLnRhc2ssIHdvcmtlcjogdGhpcywgcmVzdWx0OiByZXNwb25zZS52YWx1ZX0pO1xuICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UudHlwZSA9PSAnZXJyb3InKVxuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0Q2FsbGJhY2soe3Rhc2s6IHRoaXMudGFzaywgd29ya2VyOiB0aGlzLCByZXN1bHQ6IHJlc3BvbnNlLnZhbHVlfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2xlblVwKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHByb2Nlc3NUYXNrKHRhc2s6IFRhc2spOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAvLyBCdWlsZCB0aGUgbWVzc2FnZSBvYmplY3RcbiAgICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50YXNrID0gdGFzaztcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBmaWxlUGF0aCA6IHRhc2suZmlsZVBhdGgsXG4gICAgICAgICAgICBmdW5jdGlvbk5hbWUgOiB0YXNrLmZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgIHBhcmFtcyA6IHRhc2sucGFyYW1zLFxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmVDYWxsYmFjayA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdENhbGxiYWNrID0gcmVqZWN0O1xuICAgICAgICAgICAgc3VwZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGNsZW5VcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzb2x2ZUNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XG4gICAgfVxufVxuIl19